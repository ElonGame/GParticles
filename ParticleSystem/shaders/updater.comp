#version 430
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable
#extension GL_ARB_compute_variable_group_size : enable

layout(binding = 1, offset = 0) uniform atomic_uint aliveParticles;

layout(std430, binding = 11) buffer Lif
{
	float Lifetimes[];
};
layout(std430, binding = 12) buffer Pos
{
	vec4 Positions[];
};
layout(std430, binding = 13) buffer Vel
{
	vec4 Velocities[];
};

layout(local_size_variable) in;

uniform vec2 mouseInput;

void main()
{
	uint gid = gl_GlobalInvocationID.x;

	/*if particle is dead*/
	if (Lifetimes[gid] < 0)
		return;

	/*age particle and see if it died*/
	Lifetimes[gid] -= 0.001;
	if (Lifetimes[gid] < 0)
	{
		uint lastid = atomicCounterDecrement( aliveParticles );

		return;
	}

	/*dampen speed*/
	Velocities[gid] *= 0.99;

	vec2 attractionVec = mouseInput.xy - Positions[gid].xy;
	Velocities[gid].xy += normalize(attractionVec) * 0.001;

	Positions[gid].xyz += Velocities[gid].xyz;

	if (Positions[gid].x > 1) Velocities[gid].x *= -1; 
	if (Positions[gid].x < -1) Velocities[gid].x *= -1; 
	if (Positions[gid].y > 1) Velocities[gid].y *= -1; 
	if (Positions[gid].y < -1) Velocities[gid].y *= -1; 
	if (Positions[gid].z > 1) Velocities[gid].z *= -1; 
	if (Positions[gid].z < -1) Velocities[gid].z *= -1; 
}
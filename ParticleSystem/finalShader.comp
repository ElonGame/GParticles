#version 430
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable
#extension GL_ARB_compute_variable_group_size : enable

layout(binding = 0, offset = 0) uniform atomic_uint aliveParticles;

layout(std430, binding = 1) buffer Lifetimes
{
	float lifetimes[];
};

layout(std430, binding = 2) buffer Positions
{
	vec4 positions[];
};

layout(std430, binding = 3) buffer Velocities
{
	vec4 velocities[];
};

layout(local_size_variable) in;



void main()
{
	uint gid = gl_GlobalInvocationID.x;

	/*if particle is dead*/
	if (lifetimes[gid] < 0)
		return;

	/*age particle and see if it died*/
	lifetimes[gid] -= 0.001;
	if (lifetimes[gid] < 0)
	{
		uint lastid = atomicCounterDecrement( aliveParticles );

		return;
	}

	/*dampen speed*/
	velocities[gid] *= 0.99;

	positions[gid].xyz += velocities[gid].xyz;

	if (positions[gid].x > 1) velocities[gid].x *= -1; 
	if (positions[gid].x < -1) velocities[gid].x *= -1; 
	if (positions[gid].y > 1) velocities[gid].y *= -1; 
	if (positions[gid].y < -1) velocities[gid].y *= -1; 
	if (positions[gid].z > 1) velocities[gid].z *= -1; 
	if (positions[gid].z < -1) velocities[gid].z *= -1; 
}
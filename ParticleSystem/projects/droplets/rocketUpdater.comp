void kill()
{
	rocket_lifetimes[gid] = -1;

	atomicCounterDecrement(rocket_aliveParticles);

	int created = 0;
	int i = int(atomicCounterIncrement(rdpLast) * rdpCreate);
	for (; i < rdpSize && created < rdpCreate; i++)
	{
		if (rdpActive[i] == 0)
		{
			rdpPos[i] = rocket_positions[gid];
			rdpActive[i] = 1;
			created++;
		}
	}
}

void bounce(vec3 normal)
{
	rocket_velocities[gid].xyz = reflect(rocket_velocities[gid].xyz, normal);
}

void stick()
{
	rocket_velocities[gid] = vec4(0);
}

const vec4 spheres[2] = { 	vec4(0,-1.5,0,1),
							vec4(0, 0, 1,1 )
						};

const vec4 pPos = vec4(0,-2.5,0,1);
const vec4 pDir = vec4(0,1,0,0);
const float pLimit = 10;


void main()
{
	uint gid = gl_GlobalInvocationID.x;

	if (rocket_lifetimes[gid] <= 0)
		return;

	rocket_lifetimes[gid] -= 0.025;
	rocket_lineLifetime[gid] -= 0.025;

	if (rocket_lifetimes[gid] <= 0)
	{
		kill();
		return;
	}

	if (rocket_lineLifetime[gid] < 0)
	{
		//rocket_lastPositions[gid].xyz = rocket_positions[gid].xyz;
		rocket_lastPositions[gid].xyz += rocket_velocities[gid].xyz;

	}

	//rocket_lastPositions[gid].xyz = rocket_positions[gid].xyz;
	//rocket_velocities[gid].y -= 0.0001;
	rocket_positions[gid].xyz += rocket_velocities[gid].xyz;


	// Collisions
	for (int i = 0; i < 2; i++)
	{
		vec4 sphere = spheres[i];
		if (distance(rocket_positions[gid].xyz, sphere.xyz) < 0.5 )
		{
			vec3 normal = normalize(rocket_positions[gid].xyz - sphere.xyz);
			bounce(normal);
			//kill();
			//stick();
		}
	}

	//if (distance(rocket_positions[gid].xyz, pPos.xyz) < 0.1)
	if (rocket_positions[gid].y < pPos.y)
		bounce(pDir.xyz);
}
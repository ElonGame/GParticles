#version 430
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable
#extension GL_ARB_compute_variable_group_size : enable

////////////////////////////////////////////////////////////////////////////////
// RESOURCES
////////////////////////////////////////////////////////////////////////////////

layout(binding = 0, offset = 0) uniform atomic_uint rocket_aliveParticles;
layout(binding = 1, offset = 0) uniform atomic_uint rocket_emissionAttempts;
layout(binding = 2, offset = 0) uniform atomic_uint rdpLast;

layout(std430, binding = 3) buffer Rocket_lifetimes
{
	float rocket_lifetimes[];
};

layout(std430, binding = 4) buffer Rocket_positions
{
	vec4 rocket_positions[];
};

layout(std430, binding = 5) buffer Rocket_colors
{
	vec4 rocket_colors[];
};

layout(std430, binding = 6) buffer Rocket_velocities
{
	vec4 rocket_velocities[];
};

layout(std430, binding = 7) buffer RdpPos
{
	vec4 rdpPos[];
};

layout(std430, binding = 8) buffer RdpActive
{
	float rdpActive[];
};

layout(local_size_variable) in;

uniform float rocket_maxParticles;
uniform float rocket_toCreate;
uniform float rdpCreate;
uniform float rdpSize;

uint gid = gl_GlobalInvocationID.x;
//
// Description : Array and textureless GLSL 2D simplex noise function.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : ijm
//     Lastmod : 20110822 (ijm)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
// 

vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec2 mod289(vec2 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec3 permute(vec3 x) {
  return mod289(((x*34.0)+1.0)*x);
}

float snoise(vec2 v)
  {
  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0
                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)
                     -0.577350269189626,  // -1.0 + 2.0 * C.x
                      0.024390243902439); // 1.0 / 41.0
// First corner
  vec2 i  = floor(v + dot(v, C.yy) );
  vec2 x0 = v -   i + dot(i, C.xx);

// Other corners
  vec2 i1;
  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0
  //i1.y = 1.0 - i1.x;
  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
  // x0 = x0 - 0.0 + 0.0 * C.xx ;
  // x1 = x0 - i1 + 1.0 * C.xx ;
  // x2 = x0 - 1.0 + 2.0 * C.xx ;
  vec4 x12 = x0.xyxy + C.xxzz;
  x12.xy -= i1;

// Permutations
  i = mod289(i); // Avoid truncation effects in permutation
  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
		+ i.x + vec3(0.0, i1.x, 1.0 ));

  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);
  m = m*m ;
  m = m*m ;

// Gradients: 41 points uniformly over a line, mapped onto a diamond.
// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)

  vec3 x = 2.0 * fract(p * C.www) - 1.0;
  vec3 h = abs(x) - 0.5;
  vec3 ox = floor(x + 0.5);
  vec3 a0 = x - ox;

// Normalise gradients implicitly by scaling m
// Approximation of: m *= inversesqrt( a0*a0 + h*h );
  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );

// Compute final noise value at P
  vec3 g;
  g.x  = a0.x  * x0.x  + h.x  * x0.y;
  g.yz = a0.yz * x12.xz + h.yz * x12.yw;
  return 130.0 * dot(m, g);
}
////////////////////////////////////////////////////////////////////////////////
float randInRange(vec2 seed, float minVal, float maxVal)
{
	float val = snoise(seed);
	float percentage = val * 0.5 + 0.5;
	return mix(minVal, maxVal, percentage);
}////////////////////////////////////////////////////////////////////////////////
// values passed in as uniforms
float radius = 0.0001;
float height = 0.0001;
bool coneBaseIsOrigin = false;
bool positionsInVolume = true;

void conePositionGenerator()
{
	// compute random y in range [0, height]
	float y = randInRange(vec2(gid, gid * gid), 0, 1);

	// compute particle horizontal distance from cone axis
	float newRadius = (radius * y) / height;
	float dist = newRadius;
	if (positionsInVolume)
	{
		dist = randInRange(vec2(gid + 3 , gid + 4 * gid), 0, newRadius);
	}

	// compute rotation angle (in degrees) around cone axis
	float angle = randInRange(vec2(gid+7,gid+8*gid) * 0.01, 0, 360);

	// calculate corresponding x and z polar coordinates
	float x = dist * sin(angle);
	float z = dist * cos(angle);

	// compute cone orientation
	y = (coneBaseIsOrigin) ? height - y : y;

	rocket_positions[gid] = vec4(x, y, z, 1);
}

////////////////////////////////////////////////////////////////////////////////
bool computeFromOrigin = true;
bool randX = false;
bool randY = false;
bool randZ = false;
float intensity = 0.01;
bool randIntensity = false;
float maxInt = 0.01;
float minInt = 0;

void velocityGenerator()
{
	vec3 vel = vec3(0);

	// DIRECTION
	// check if velocity should be computed in regards of psystem origin
	if (computeFromOrigin) vel = rocket_positions[gid].xyz;

	// check if any direction should be randomized
	if (randX) vel.x = snoise(vec2(gid,gid*gid));
	if (randY) vel.y = snoise(vec2(gid+3,gid+4*gid));
	if (randZ) vel.z = snoise(vec2(gid+7,gid+8*gid) * 4);

	// avoid normalizing a zero vector
	if (vel != vec3(0)) vel = normalize(vel);

	// INTENSITY
	// check if intesity should be randomized
	if (randIntensity)
		intensity = randInRange(vec2(gid*gid,gid*gid), minInt, maxInt);

	rocket_velocities[gid].xyz = vel * intensity;
}

void onEmission()
{
	rocket_lifetimes[gid] = snoise(vec2(gid,gid*gid)) + 2;
	conePositionGenerator();
	velocityGenerator();
	rocket_colors[gid] = vec4(0.9,0.1,0.1,1);
}

void main()
{
	uint gid = gl_GlobalInvocationID.x;

	/*LIMITERS*/
	if (atomicCounter(rocket_aliveParticles) >= rocket_maxParticles)
		return;

	if (rocket_lifetimes[gid] <= 0)
	{
		if (atomicCounterIncrement(rocket_emissionAttempts) < rocket_toCreate)
		{
			atomicCounterIncrement(rocket_aliveParticles);

			onEmission();
		}
	}
}